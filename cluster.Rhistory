
install.packages("rattle")
install.packages("rattle", repos="http://rattle.togaware.com", type="source")

devtools::install_bitbucket("kayontoga/rattle")

data(wine, package="rattle")
install.packages(rattle, dependencies=c("Depends", "Suggests"))
install.packages("rattle", repos="http://rattle.togaware.com", type="source")
library(rattle)


# Due to a dependence upon another package that is not available for my Mac OS revision, I could not load "rattle" package.
# I found the data online, so I hope that the excercises will work correctly.
scale(wine, center=TRUE, scale=TRUE)

View(wine)

wssplot <- function(data, nc=15, seed=1234){wss<- (nrow(data)-1)*sum(apply(data,2,var)) for(i in 2:nc){ set.seed(seed) wss[i] <- sum(kmeans(data, centers=i)$withinss)} plot(1:nc, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")}
save.image("wine.RData")
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
}

wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
}
wssplot(wine)
print(wssplot(wine))
#14-15 clusters showing in plot

#5 or 6 clusters showing in plot in the bend of the curve.
# Trying kmeans to compare

ggplot(wssplot, aes(wine,wssplot, color=cluster)) + geom_point()
summary(wssplot)
set.seed(1234)

nc <- NbClust(wine, min.nc=2, max.nc=15, method="kmeans")
barplot(table(nc$Best.n[1,]),
xlab="Numer of Clusters", ylab="Number of Criteria",
main="Number of Clusters Chosen by 26 Criteria")

# The winner in NbClust is 2 clusters.

list(nc)


cluster2 <- function(wine, nc=2, seed=1234){
cluster <- (nrow(wine)-1)*sum(apply(wine,2,var))
for (i in 2:nc){
set.seed(seed)
cluster[i] <- sum(kmeans(wine, centers=i)$withinss)}
plot(1:nc, cluster, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
}

cluster(wine)
fit.km <- kmeans(wine,2,iter.max=10, nstart=1,algorithm=c("Hartigan-Wong", "Lloyd", "Forgy", "MacQueen"), trace=FALSE)
summary(fit.km)

# There is no wine$Type in the file I loaded.

View(wine)
clusplot(fit.km$clusters)
clusplot(fit.km)
clusplot(cluster2)
clusplot(nc
clusplot(nc)
clusplot(pam(wine,2))
clusplot(fanny(wine,2))
clusplot(clara(wine,2))
clusplot(clara(cluster2,2))
clusplot(clara(fit.km,2))
clusplot(clara(wssplot,2))

# There is a lot of overlap in the 2 clusters. I checked out multiple options to see what they would show.

clusplot(clara(wine,3))
clusplot(clara(wine,4))
clusplot(clara(wine,5))
clusplot(clara(wine,2))
clusplot(clara(wine,15))
clusplot(clara(wine,2))
library(readxl)

View(wine)

scale(wine)
wssplot <- function(wine, nc=15, seed=1234){
wss <- (nrow(wine)-1)*sum(apply(wine,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(wine, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
}

wssplot(wine)

# The plot shows 5-6 clusters.

set.seed(1234)
nc <- NbClust(wine, min.nc=2, max.nc=15, method="kmeans")
barplot(table(nc$Best.n[1,]),
xlab="Numer of Clusters", ylab="Number of Criteria",
main="Number of Clusters Chosen by 26 Criteria")

# This method suggests 2 clusters.

fit.km <- kmeans(wine, 2, iter.max=15, nstart=2, algorithm=c("Hartigan-Wong", "Lloyd", "Forgy", "MacQueen"), trace=FALSE)

summary(wine$class)

summary(fit.km$clusters)
summary(fit.km)

clusplot(pam(wine,2))
clusplot(pam(wine,5))

clusplot(pam(wine,3))
clusplot(pam(wine,2))

df <- scale(wine[-1])
wssplot(df)
set.seed(1234)
nc<- NbClust(df, min.nc=2, max.nc=15, method="kmeans")
table(nc$Best.n[1,])
barplot(table(nc$Best.n[1,]), xlab="Number of Clusters", ylab="Number of Criteria", main="Number of Clusters Chosen by 26 Criteria")
set.seed(1234)
fit.km <- kmeans(df, 3, nstart=25)
fit.km$size
fit.km$centers

aggregate(wine[-1], by=list(cluster=fit.km$cluster), mean)
ct.km <- table(wine$class, fit.km$cluster)
ct.km
randIndes(ct.km)

# Due to not being able to load "rattle", I went to the original weblink and used what I found between both sets of instructions. I was able to learn that the methodology was successful.

save.image("cluster.RData")
savehistory("cluster.Rhistory")
